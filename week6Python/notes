##** Python
# To run a program
python3 ./hello.py
	# runs an interpreter

// dynamically typed, it will try to determine the datatypes if not explicitly defined


##** import a library
import cs50
	# cs50 is the file name

#** hello
from cs50 import get_string

answer = get_string("What's your name? ")

print("Hello, " + answer)	// Hello, bob
print("Hello,", answer)		// concat with put a free space. Hello, bob
print(f"Hello, {answer}")	// format strings, better way to print since you can read the string left to right while plugging in the vars. Hello, bob


##** Data Types
bool
float
int
str

// less data types than C, but they will use more bytes to have room

range
list
set
tuple
dict


##** speller
words = set()	// collection of values with no duplicates. This is used as a hash table.

def check(word):
	if word.lower() in words:
		return True
	else:
		return False

def load(dictionary):
	file = open(dictionary, "r")
	for line in file:
		word = line.rstrip()	// remove trailing "new line"
		words.add(word)
	close(file)
	return True

def size():
	return len(words)

def unload():
	return True	// don't need to manaully free memory


// C speller is faster than python speller
// Why?
// C is usually more efficient due to the direct management of low level resources, 
// while Python is more convient and high level but easier to use to save the programmer time at the cost of time/memory performance.


##** image recognition
// easy in Python
checking pixels and measurements between features


##** cs50 library
import cs50						// for all functions
or
from cs50 import get_float, get_int, get_string		// for specific functions

// get_float
// get_int
// get_string


##** conditionals
// if/elif/else
if x < y:				// You can still use parentheses. (x < y)
	print("x is less than y")	// ensure indent for Python to indicate it is part of the 'if'
elif x > y:
	print("a")
else:
	print("b")


##** variables
// don't need to specify the data type, Python interpreter will try to determine it
count = 0

count++			// Can't use in Py
count = count + 1	// Can
count += 1		// Can


##** loops
// while
i = 0
while i < 3:
	print("hi")
	i += 1

// for
for i in [0, 1, 2]:	// works but, better to use range
	print("hi")


for i in range(0,3):	// range is [0, 3). stores 1 value in the same mem one at a time to reduce memory storage
	print("hi")

// forever block
while True:
	print("hi")


##** Calculator
from cs50 import get_int

def main():				// don't need a function, could have just wrote a script to run
	x = get_int("x: ")
	y = get_int("y: ")
	print(x + y)	


main()


// without cs50 lib
x = input("x: ")
y = input("y: ")	// default input is a string
print(x + y)		// treats the inputs as a string so it concats

// cast to int
x = int(input("x: "))
y = int(input("y: "))	// cast to int
print(x + y)		// will now do arithmetic

z = x / y	// automatically converts the arithmetic result to float
print(z)

print(f"{z:.50f}")	// format significant digits. 50 sig digits to the right of the decimal and 'f' indicates float. 
			// if 1 / 3 = 0.3333333333312314213, it has some 'garbage values' due to the memory limit of float. (floating point imprecision)


##** integer overflow
after max memory used, it would start to 'wrap' around in the bit arithmetic
// In Python it will keep allocating more memory of very large ints, but it will display a limited number of chars so
//	 you will probably need to format to see the entire number


##** compare
// ints
from cs50 get_int

x = get_int("x: ")
y = get_int("y: ")

if x < y:
	print("x < y")
elif x > y:
	print("x > y")
else:
	print("x = y")

// strings

s = input("Agree: ")

s_lower = s.lower()	// get the string 's' but in lower case and store into 's_lower'. 
			// Strings are immutable, if s = s.lower(), it is not changing the values in the original's memory, it is creating a new object and then 
			//	assigning it.

if s == "y":			//more, can use list:  if s in ["y", "yes"]
	print("agree")
elif s == "n":
	print("not agree")
else:
	print("none")


##** Object orient programming
For string 's', it is an object and has its own built in functionality.
e.x. string has a method named lower()
	so s.lower() will force all the chars in the string to lowercase.


##** docs.python.org

##** Meow
def meow():
	print("meow")
	
for i in range(0, 3):
	meow()		// must define the function before use


//

def main():	
	meow(3)		// can be here since not used before defined.

def meow(num):
	for i in range(0, num):
		print("meow")

main()	// call main


##** Mario
from cs50 import get_int

def main():
	height = get_height()
	print_column(height)


def get_height():
	while True:
		try:					// try to get an input from the user and cast as int, only 'try' the parts that are prone to error like input
			n = int(input("H: "))
		except ValueError:			// catch this specific error
			print("Your input is not an int")
			continue			// if error due to could not cast to int, re ask

		if n > 0:
			return n

// double new line between functions for style 
def print_column(n):
	for i in range(0, height):
		print("#")

main()


// print without new line
for i in range(0, 3):
	print("?", end = "")	// overwrite the default end '\n' to '', so it will print on the same line

// multiply chars
print("?" * 4, end = "")	// ????

// print 2 d square ex
for i in range(0, 3):		// loop 3 times
	print("#" * 3)		// print '###' 


##** scores
// avg test scores

scores = [72, 73, 33]

average = sum(scores) / len(scores)
print(f"avg: {average}")


// get scores from user
from cs50 import get_int

scores = []	// can create an empty list since it is dynamic

for i in range(3):
	score = get_int("score: ")
	scores.append(score)		// scores += [score], also can append to the list like this

##** upper case
// convert chars to upper
before = input("string: ")
print("after: ", end = "")
for c in before:			// iterate the string
	print(c.upper(), end = "")
print()

after = before.upper()			// can just upper the entire string
print(f"After: {after}")
 

##** command line args
from sys import argv

if len(argv) == 2:			// total args, including the program name. python ./greet.py bob
	print(f"hello {argv[1]}")	// argv[1], the first command-line arg
else:
	print("Hello world")

for i in range(len(argv)):
	print(argv[i])

for arg in argv:		// iterate the argv list
	print(arg)

for arg in argv[1:]:		// [start:end:step] SLICE, end is exclusive. 
	print(arg)


##** exit status
import sys

if len(sys.argv) != 2:
	print("missing command line args")
	sys.exit(1)		// exit code with value 1, usually indicate error

print(argv[1])
sys.exit(0)			// exit code with value 0, usually successfully ran


$ echo $?		// in terminal to see return value


##** search
import sys

names = ["bill", "charlie", "ron"]

name = input("which name? ")

for n in names:
	if name == n:
		print("found")
		sys.exit(0)

print("not found")
// sys.exit(1)

if name in names:		// with a list you can just use 'in'
	print("found")
else:
	print("not found")


##** phonebook
// use a dictionary that has key:value pairs. essentially a hash table for best attempt at O(1) search

phonebook = {}	// or = dict() for empty dict

people = {
	"carter":"1234",
	"dave":"5678",
	"lucy":"2468"
}

name = input("which name: ")

if name in people:			// searches the keys
	print(f"val: {people[name]}")	// prints the value with the key


##** compare

s = input("s: ")
t = input("t: ")

if (s == t):		// in C, needed strcmp() due to in C the strings are in different locations in memory.
	print("same")
else:
	print("diff")


s = "hello"
t = s.capitalize()	// copy to new variable, original remains the same


##** swap

x = 1
y = 2

x, y = y, x	// swaps for you without a 'temp' var needed


##** CSV

import csv

file = open("phonebook.csv", "a")	// open file in append mode

name = input("name: ")
number = input("number: ")

writer = csv.writer(file)		// treat this file as a csv file
writer.row([name, number])		// write row with the list values and comma sperated due to above line

file.close()


// auto close file after block complete
with open("phonebook.csv", "a") as file:
	// do stuff with file

	name = input("name: ")
	number = input("number: ")

	writer = csv.DictWriter(file, fieldnames = ["name", "number"])	// specifying the columns of the csv
	writer.writerow({"name": name, "number": number}	// now with a dict, the order of the columns doesn't matter, it will find the column and put the 
								//	the value there

-- after block the 'file' will be closed


##** speech
import pyttsx3

engine = pyttsx3.init()		// initialize
// engine = say("Hello world")

words = input("Input: ")
engine = say(f"Hello, {words}")

engine.runAndWait()		// waiting to end


// 
import os
import qrcode

img = qrcode.make("https//youtube...")	// creates a qr code for the url, so when scanned it redirects to the url in a browser

img.save("qr.png", "PNG")

os.system("open qr.png")		// os lib


####
pracprobs -- here
lab6
probset6
